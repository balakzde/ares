/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegistraceRcns
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class RegistraceRcns {
  public static final String SERIALIZED_NAME_CISLO_REGISTRACE = "cisloRegistrace";
  @SerializedName(SERIALIZED_NAME_CISLO_REGISTRACE)
  private String cisloRegistrace;

  public static final String SERIALIZED_NAME_CISLO_ZRUSENI_REGISTRACE = "cisloZruseniRegistrace";
  @SerializedName(SERIALIZED_NAME_CISLO_ZRUSENI_REGISTRACE)
  private String cisloZruseniRegistrace;

  public static final String SERIALIZED_NAME_DATUM_LIKVIDACE = "datumLikvidace";
  @SerializedName(SERIALIZED_NAME_DATUM_LIKVIDACE)
  private LocalDate datumLikvidace;

  public static final String SERIALIZED_NAME_DATUM_KONKURZU = "datumKonkurzu";
  @SerializedName(SERIALIZED_NAME_DATUM_KONKURZU)
  private LocalDate datumKonkurzu;

  public static final String SERIALIZED_NAME_DATUM_OPATROVNIK = "datumOpatrovnik";
  @SerializedName(SERIALIZED_NAME_DATUM_OPATROVNIK)
  private LocalDate datumOpatrovnik;

  public static final String SERIALIZED_NAME_DATUM_ZRUSENI_REGISTRACE = "datumZruseniRegistrace";
  @SerializedName(SERIALIZED_NAME_DATUM_ZRUSENI_REGISTRACE)
  private LocalDate datumZruseniRegistrace;

  public RegistraceRcns() {
  }

  public RegistraceRcns cisloRegistrace(String cisloRegistrace) {
    
    this.cisloRegistrace = cisloRegistrace;
    return this;
  }

   /**
   * Pro subjekt typu církev a svaz církví je zde uvedeno registrační číslo pod kterým byl daný subjekt zaregistrován na MK. Pro subjekty typu právnická osoba je zde uvedeno evidenční číslo pod kterým byl daný subjekt zaevidován na MK.
   * @return cisloRegistrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pro subjekt typu církev a svaz církví je zde uvedeno registrační číslo pod kterým byl daný subjekt zaregistrován na MK. Pro subjekty typu právnická osoba je zde uvedeno evidenční číslo pod kterým byl daný subjekt zaevidován na MK.")

  public String getCisloRegistrace() {
    return cisloRegistrace;
  }


  public void setCisloRegistrace(String cisloRegistrace) {
    this.cisloRegistrace = cisloRegistrace;
  }


  public RegistraceRcns cisloZruseniRegistrace(String cisloZruseniRegistrace) {
    
    this.cisloZruseniRegistrace = cisloZruseniRegistrace;
    return this;
  }

   /**
   * Datum zrušení registrace, evidence subjektu na MK
   * @return cisloZruseniRegistrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Datum zrušení registrace, evidence subjektu na MK")

  public String getCisloZruseniRegistrace() {
    return cisloZruseniRegistrace;
  }


  public void setCisloZruseniRegistrace(String cisloZruseniRegistrace) {
    this.cisloZruseniRegistrace = cisloZruseniRegistrace;
  }


  public RegistraceRcns datumLikvidace(LocalDate datumLikvidace) {
    
    this.datumLikvidace = datumLikvidace;
    return this;
  }

   /**
   * Datum vyhlášení likvidace subjektu
   * @return datumLikvidace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Datum vyhlášení likvidace subjektu")

  public LocalDate getDatumLikvidace() {
    return datumLikvidace;
  }


  public void setDatumLikvidace(LocalDate datumLikvidace) {
    this.datumLikvidace = datumLikvidace;
  }


  public RegistraceRcns datumKonkurzu(LocalDate datumKonkurzu) {
    
    this.datumKonkurzu = datumKonkurzu;
    return this;
  }

   /**
   * Datum vyhlášení konkurzu subjektu
   * @return datumKonkurzu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Datum vyhlášení konkurzu subjektu")

  public LocalDate getDatumKonkurzu() {
    return datumKonkurzu;
  }


  public void setDatumKonkurzu(LocalDate datumKonkurzu) {
    this.datumKonkurzu = datumKonkurzu;
  }


  public RegistraceRcns datumOpatrovnik(LocalDate datumOpatrovnik) {
    
    this.datumOpatrovnik = datumOpatrovnik;
    return this;
  }

   /**
   * Datum jmenování opatrovníka
   * @return datumOpatrovnik
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Datum jmenování opatrovníka")

  public LocalDate getDatumOpatrovnik() {
    return datumOpatrovnik;
  }


  public void setDatumOpatrovnik(LocalDate datumOpatrovnik) {
    this.datumOpatrovnik = datumOpatrovnik;
  }


  public RegistraceRcns datumZruseniRegistrace(LocalDate datumZruseniRegistrace) {
    
    this.datumZruseniRegistrace = datumZruseniRegistrace;
    return this;
  }

   /**
   * Datum zrušení registrace, evidence subjektu na MK
   * @return datumZruseniRegistrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Datum zrušení registrace, evidence subjektu na MK")

  public LocalDate getDatumZruseniRegistrace() {
    return datumZruseniRegistrace;
  }


  public void setDatumZruseniRegistrace(LocalDate datumZruseniRegistrace) {
    this.datumZruseniRegistrace = datumZruseniRegistrace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistraceRcns registraceRcns = (RegistraceRcns) o;
    return Objects.equals(this.cisloRegistrace, registraceRcns.cisloRegistrace) &&
        Objects.equals(this.cisloZruseniRegistrace, registraceRcns.cisloZruseniRegistrace) &&
        Objects.equals(this.datumLikvidace, registraceRcns.datumLikvidace) &&
        Objects.equals(this.datumKonkurzu, registraceRcns.datumKonkurzu) &&
        Objects.equals(this.datumOpatrovnik, registraceRcns.datumOpatrovnik) &&
        Objects.equals(this.datumZruseniRegistrace, registraceRcns.datumZruseniRegistrace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cisloRegistrace, cisloZruseniRegistrace, datumLikvidace, datumKonkurzu, datumOpatrovnik, datumZruseniRegistrace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistraceRcns {\n");
    sb.append("    cisloRegistrace: ").append(toIndentedString(cisloRegistrace)).append("\n");
    sb.append("    cisloZruseniRegistrace: ").append(toIndentedString(cisloZruseniRegistrace)).append("\n");
    sb.append("    datumLikvidace: ").append(toIndentedString(datumLikvidace)).append("\n");
    sb.append("    datumKonkurzu: ").append(toIndentedString(datumKonkurzu)).append("\n");
    sb.append("    datumOpatrovnik: ").append(toIndentedString(datumOpatrovnik)).append("\n");
    sb.append("    datumZruseniRegistrace: ").append(toIndentedString(datumZruseniRegistrace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cisloRegistrace");
    openapiFields.add("cisloZruseniRegistrace");
    openapiFields.add("datumLikvidace");
    openapiFields.add("datumKonkurzu");
    openapiFields.add("datumOpatrovnik");
    openapiFields.add("datumZruseniRegistrace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegistraceRcns
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RegistraceRcns.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistraceRcns is not found in the empty JSON string", RegistraceRcns.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegistraceRcns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistraceRcns` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cisloRegistrace") != null && !jsonObj.get("cisloRegistrace").isJsonNull()) && !jsonObj.get("cisloRegistrace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cisloRegistrace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cisloRegistrace").toString()));
      }
      if ((jsonObj.get("cisloZruseniRegistrace") != null && !jsonObj.get("cisloZruseniRegistrace").isJsonNull()) && !jsonObj.get("cisloZruseniRegistrace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cisloZruseniRegistrace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cisloZruseniRegistrace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistraceRcns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistraceRcns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistraceRcns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistraceRcns.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistraceRcns>() {
           @Override
           public void write(JsonWriter out, RegistraceRcns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistraceRcns read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegistraceRcns given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegistraceRcns
  * @throws IOException if the JSON string is invalid with respect to RegistraceRcns
  */
  public static RegistraceRcns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistraceRcns.class);
  }

 /**
  * Convert an instance of RegistraceRcns to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

