/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AngazovanaOsobaNrpzs;
import org.openapitools.client.model.Kontakty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZaznamNrpzsAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class ZaznamNrpzsAllOf {
  public static final String SERIALIZED_NAME_PORADOVE_CISLO_ZAR = "poradoveCisloZar";
  @SerializedName(SERIALIZED_NAME_PORADOVE_CISLO_ZAR)
  private String poradoveCisloZar;

  public static final String SERIALIZED_NAME_PORADOVE_CISLO_PRAC = "poradoveCisloPrac";
  @SerializedName(SERIALIZED_NAME_PORADOVE_CISLO_PRAC)
  private String poradoveCisloPrac;

  public static final String SERIALIZED_NAME_TYP_SUBJEKTU = "typSubjektu";
  @SerializedName(SERIALIZED_NAME_TYP_SUBJEKTU)
  private String typSubjektu;

  public static final String SERIALIZED_NAME_DRUH_ZARIZENI = "druhZarizeni";
  @SerializedName(SERIALIZED_NAME_DRUH_ZARIZENI)
  private String druhZarizeni;

  public static final String SERIALIZED_NAME_PRIMARNI_ZAZNAM = "primarniZaznam";
  @SerializedName(SERIALIZED_NAME_PRIMARNI_ZAZNAM)
  private Boolean primarniZaznam;

  public static final String SERIALIZED_NAME_TYP_ZRIZOVATELE = "typZrizovatele";
  @SerializedName(SERIALIZED_NAME_TYP_ZRIZOVATELE)
  private String typZrizovatele;

  public static final String SERIALIZED_NAME_ANGAZOVANE_OSOBY = "angazovaneOsoby";
  @SerializedName(SERIALIZED_NAME_ANGAZOVANE_OSOBY)
  private List<AngazovanaOsobaNrpzs> angazovaneOsoby = null;

  public static final String SERIALIZED_NAME_KONTAKTY = "kontakty";
  @SerializedName(SERIALIZED_NAME_KONTAKTY)
  private Kontakty kontakty;

  public ZaznamNrpzsAllOf() {
  }

  public ZaznamNrpzsAllOf poradoveCisloZar(String poradoveCisloZar) {
    
    this.poradoveCisloZar = poradoveCisloZar;
    return this;
  }

   /**
   * Pořadové číslo zařízení 
   * @return poradoveCisloZar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pořadové číslo zařízení ")

  public String getPoradoveCisloZar() {
    return poradoveCisloZar;
  }


  public void setPoradoveCisloZar(String poradoveCisloZar) {
    this.poradoveCisloZar = poradoveCisloZar;
  }


  public ZaznamNrpzsAllOf poradoveCisloPrac(String poradoveCisloPrac) {
    
    this.poradoveCisloPrac = poradoveCisloPrac;
    return this;
  }

   /**
   * Pořadové číslo pracovistě 
   * @return poradoveCisloPrac
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pořadové číslo pracovistě ")

  public String getPoradoveCisloPrac() {
    return poradoveCisloPrac;
  }


  public void setPoradoveCisloPrac(String poradoveCisloPrac) {
    this.poradoveCisloPrac = poradoveCisloPrac;
  }


  public ZaznamNrpzsAllOf typSubjektu(String typSubjektu) {
    
    this.typSubjektu = typSubjektu;
    return this;
  }

   /**
   * Typ ekonomického subjektu - forma hospodaření - kód (ciselnikKod: TypSubjektu, zdroj: nrpzs)
   * @return typSubjektu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Typ ekonomického subjektu - forma hospodaření - kód (ciselnikKod: TypSubjektu, zdroj: nrpzs)")

  public String getTypSubjektu() {
    return typSubjektu;
  }


  public void setTypSubjektu(String typSubjektu) {
    this.typSubjektu = typSubjektu;
  }


  public ZaznamNrpzsAllOf druhZarizeni(String druhZarizeni) {
    
    this.druhZarizeni = druhZarizeni;
    return this;
  }

   /**
   * Druh zdravotnického zařízení - kód (ciselnikKod: DruhZarizeni, zdroj: nrpzs)
   * @return druhZarizeni
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Druh zdravotnického zařízení - kód (ciselnikKod: DruhZarizeni, zdroj: nrpzs)")

  public String getDruhZarizeni() {
    return druhZarizeni;
  }


  public void setDruhZarizeni(String druhZarizeni) {
    this.druhZarizeni = druhZarizeni;
  }


  public ZaznamNrpzsAllOf primarniZaznam(Boolean primarniZaznam) {
    
    this.primarniZaznam = primarniZaznam;
    return this;
  }

   /**
   * Get primarniZaznam
   * @return primarniZaznam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPrimarniZaznam() {
    return primarniZaznam;
  }


  public void setPrimarniZaznam(Boolean primarniZaznam) {
    this.primarniZaznam = primarniZaznam;
  }


  public ZaznamNrpzsAllOf typZrizovatele(String typZrizovatele) {
    
    this.typZrizovatele = typZrizovatele;
    return this;
  }

   /**
   * Typ zřizovatele zdravotnického zařízení - kód (ciselnikKod: Zrizovatel, zdroj: nrpzs) 
   * @return typZrizovatele
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Typ zřizovatele zdravotnického zařízení - kód (ciselnikKod: Zrizovatel, zdroj: nrpzs) ")

  public String getTypZrizovatele() {
    return typZrizovatele;
  }


  public void setTypZrizovatele(String typZrizovatele) {
    this.typZrizovatele = typZrizovatele;
  }


  public ZaznamNrpzsAllOf angazovaneOsoby(List<AngazovanaOsobaNrpzs> angazovaneOsoby) {
    
    this.angazovaneOsoby = angazovaneOsoby;
    return this;
  }

  public ZaznamNrpzsAllOf addAngazovaneOsobyItem(AngazovanaOsobaNrpzs angazovaneOsobyItem) {
    if (this.angazovaneOsoby == null) {
      this.angazovaneOsoby = new ArrayList<>();
    }
    this.angazovaneOsoby.add(angazovaneOsobyItem);
    return this;
  }

   /**
   * Get angazovaneOsoby
   * @return angazovaneOsoby
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AngazovanaOsobaNrpzs> getAngazovaneOsoby() {
    return angazovaneOsoby;
  }


  public void setAngazovaneOsoby(List<AngazovanaOsobaNrpzs> angazovaneOsoby) {
    this.angazovaneOsoby = angazovaneOsoby;
  }


  public ZaznamNrpzsAllOf kontakty(Kontakty kontakty) {
    
    this.kontakty = kontakty;
    return this;
  }

   /**
   * Get kontakty
   * @return kontakty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Kontakty getKontakty() {
    return kontakty;
  }


  public void setKontakty(Kontakty kontakty) {
    this.kontakty = kontakty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZaznamNrpzsAllOf zaznamNrpzsAllOf = (ZaznamNrpzsAllOf) o;
    return Objects.equals(this.poradoveCisloZar, zaznamNrpzsAllOf.poradoveCisloZar) &&
        Objects.equals(this.poradoveCisloPrac, zaznamNrpzsAllOf.poradoveCisloPrac) &&
        Objects.equals(this.typSubjektu, zaznamNrpzsAllOf.typSubjektu) &&
        Objects.equals(this.druhZarizeni, zaznamNrpzsAllOf.druhZarizeni) &&
        Objects.equals(this.primarniZaznam, zaznamNrpzsAllOf.primarniZaznam) &&
        Objects.equals(this.typZrizovatele, zaznamNrpzsAllOf.typZrizovatele) &&
        Objects.equals(this.angazovaneOsoby, zaznamNrpzsAllOf.angazovaneOsoby) &&
        Objects.equals(this.kontakty, zaznamNrpzsAllOf.kontakty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poradoveCisloZar, poradoveCisloPrac, typSubjektu, druhZarizeni, primarniZaznam, typZrizovatele, angazovaneOsoby, kontakty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZaznamNrpzsAllOf {\n");
    sb.append("    poradoveCisloZar: ").append(toIndentedString(poradoveCisloZar)).append("\n");
    sb.append("    poradoveCisloPrac: ").append(toIndentedString(poradoveCisloPrac)).append("\n");
    sb.append("    typSubjektu: ").append(toIndentedString(typSubjektu)).append("\n");
    sb.append("    druhZarizeni: ").append(toIndentedString(druhZarizeni)).append("\n");
    sb.append("    primarniZaznam: ").append(toIndentedString(primarniZaznam)).append("\n");
    sb.append("    typZrizovatele: ").append(toIndentedString(typZrizovatele)).append("\n");
    sb.append("    angazovaneOsoby: ").append(toIndentedString(angazovaneOsoby)).append("\n");
    sb.append("    kontakty: ").append(toIndentedString(kontakty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("poradoveCisloZar");
    openapiFields.add("poradoveCisloPrac");
    openapiFields.add("typSubjektu");
    openapiFields.add("druhZarizeni");
    openapiFields.add("primarniZaznam");
    openapiFields.add("typZrizovatele");
    openapiFields.add("angazovaneOsoby");
    openapiFields.add("kontakty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZaznamNrpzsAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ZaznamNrpzsAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZaznamNrpzsAllOf is not found in the empty JSON string", ZaznamNrpzsAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ZaznamNrpzsAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZaznamNrpzsAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("poradoveCisloZar") != null && !jsonObj.get("poradoveCisloZar").isJsonNull()) && !jsonObj.get("poradoveCisloZar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poradoveCisloZar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poradoveCisloZar").toString()));
      }
      if ((jsonObj.get("poradoveCisloPrac") != null && !jsonObj.get("poradoveCisloPrac").isJsonNull()) && !jsonObj.get("poradoveCisloPrac").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poradoveCisloPrac` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poradoveCisloPrac").toString()));
      }
      if ((jsonObj.get("typSubjektu") != null && !jsonObj.get("typSubjektu").isJsonNull()) && !jsonObj.get("typSubjektu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typSubjektu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typSubjektu").toString()));
      }
      if ((jsonObj.get("druhZarizeni") != null && !jsonObj.get("druhZarizeni").isJsonNull()) && !jsonObj.get("druhZarizeni").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `druhZarizeni` to be a primitive type in the JSON string but got `%s`", jsonObj.get("druhZarizeni").toString()));
      }
      if ((jsonObj.get("typZrizovatele") != null && !jsonObj.get("typZrizovatele").isJsonNull()) && !jsonObj.get("typZrizovatele").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typZrizovatele` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typZrizovatele").toString()));
      }
      if (jsonObj.get("angazovaneOsoby") != null && !jsonObj.get("angazovaneOsoby").isJsonNull()) {
        JsonArray jsonArrayangazovaneOsoby = jsonObj.getAsJsonArray("angazovaneOsoby");
        if (jsonArrayangazovaneOsoby != null) {
          // ensure the json data is an array
          if (!jsonObj.get("angazovaneOsoby").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `angazovaneOsoby` to be an array in the JSON string but got `%s`", jsonObj.get("angazovaneOsoby").toString()));
          }

          // validate the optional field `angazovaneOsoby` (array)
          for (int i = 0; i < jsonArrayangazovaneOsoby.size(); i++) {
            AngazovanaOsobaNrpzs.validateJsonObject(jsonArrayangazovaneOsoby.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `kontakty`
      if (jsonObj.get("kontakty") != null && !jsonObj.get("kontakty").isJsonNull()) {
        Kontakty.validateJsonObject(jsonObj.getAsJsonObject("kontakty"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZaznamNrpzsAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZaznamNrpzsAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZaznamNrpzsAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZaznamNrpzsAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ZaznamNrpzsAllOf>() {
           @Override
           public void write(JsonWriter out, ZaznamNrpzsAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZaznamNrpzsAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZaznamNrpzsAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZaznamNrpzsAllOf
  * @throws IOException if the JSON string is invalid with respect to ZaznamNrpzsAllOf
  */
  public static ZaznamNrpzsAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZaznamNrpzsAllOf.class);
  }

 /**
  * Convert an instance of ZaznamNrpzsAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

