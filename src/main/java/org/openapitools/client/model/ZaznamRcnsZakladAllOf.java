/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AdresaRcns;
import org.openapitools.client.model.RegistraceRcns;
import org.openapitools.client.model.ZpusobJednani;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZaznamRcnsZakladAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class ZaznamRcnsZakladAllOf {
  public static final String SERIALIZED_NAME_TYP_SUBJEKTU = "typSubjektu";
  @SerializedName(SERIALIZED_NAME_TYP_SUBJEKTU)
  private String typSubjektu;

  public static final String SERIALIZED_NAME_STAT = "stat";
  @SerializedName(SERIALIZED_NAME_STAT)
  private String stat;

  public static final String SERIALIZED_NAME_PRIMARNI_ZAZNAM = "primarniZaznam";
  @SerializedName(SERIALIZED_NAME_PRIMARNI_ZAZNAM)
  private Boolean primarniZaznam;

  public static final String SERIALIZED_NAME_REGISTRACE = "registrace";
  @SerializedName(SERIALIZED_NAME_REGISTRACE)
  private RegistraceRcns registrace;

  public static final String SERIALIZED_NAME_ZPUSOB_JEDNANI = "zpusobJednani";
  @SerializedName(SERIALIZED_NAME_ZPUSOB_JEDNANI)
  private List<ZpusobJednani> zpusobJednani = null;

  public static final String SERIALIZED_NAME_ADRESY_SUBJEKTU = "adresySubjektu";
  @SerializedName(SERIALIZED_NAME_ADRESY_SUBJEKTU)
  private List<AdresaRcns> adresySubjektu = null;

  public static final String SERIALIZED_NAME_ZDROJ_ID = "zdrojId";
  @SerializedName(SERIALIZED_NAME_ZDROJ_ID)
  private String zdrojId;

  public static final String SERIALIZED_NAME_PLATNOST_OD = "platnostOd";
  @SerializedName(SERIALIZED_NAME_PLATNOST_OD)
  private LocalDate platnostOd;

  public ZaznamRcnsZakladAllOf() {
  }

  public ZaznamRcnsZakladAllOf typSubjektu(String typSubjektu) {
    
    this.typSubjektu = typSubjektu;
    return this;
  }

   /**
   * Typ subjektu - kód (ciselnikKod: TypSubjektuRcns) 
   * @return typSubjektu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Typ subjektu - kód (ciselnikKod: TypSubjektuRcns) ")

  public String getTypSubjektu() {
    return typSubjektu;
  }


  public void setTypSubjektu(String typSubjektu) {
    this.typSubjektu = typSubjektu;
  }


  public ZaznamRcnsZakladAllOf stat(String stat) {
    
    this.stat = stat;
    return this;
  }

   /**
   * Get stat
   * @return stat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStat() {
    return stat;
  }


  public void setStat(String stat) {
    this.stat = stat;
  }


  public ZaznamRcnsZakladAllOf primarniZaznam(Boolean primarniZaznam) {
    
    this.primarniZaznam = primarniZaznam;
    return this;
  }

   /**
   * Get primarniZaznam
   * @return primarniZaznam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPrimarniZaznam() {
    return primarniZaznam;
  }


  public void setPrimarniZaznam(Boolean primarniZaznam) {
    this.primarniZaznam = primarniZaznam;
  }


  public ZaznamRcnsZakladAllOf registrace(RegistraceRcns registrace) {
    
    this.registrace = registrace;
    return this;
  }

   /**
   * Get registrace
   * @return registrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RegistraceRcns getRegistrace() {
    return registrace;
  }


  public void setRegistrace(RegistraceRcns registrace) {
    this.registrace = registrace;
  }


  public ZaznamRcnsZakladAllOf zpusobJednani(List<ZpusobJednani> zpusobJednani) {
    
    this.zpusobJednani = zpusobJednani;
    return this;
  }

  public ZaznamRcnsZakladAllOf addZpusobJednaniItem(ZpusobJednani zpusobJednaniItem) {
    if (this.zpusobJednani == null) {
      this.zpusobJednani = new ArrayList<>();
    }
    this.zpusobJednani.add(zpusobJednaniItem);
    return this;
  }

   /**
   * Get zpusobJednani
   * @return zpusobJednani
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ZpusobJednani> getZpusobJednani() {
    return zpusobJednani;
  }


  public void setZpusobJednani(List<ZpusobJednani> zpusobJednani) {
    this.zpusobJednani = zpusobJednani;
  }


  public ZaznamRcnsZakladAllOf adresySubjektu(List<AdresaRcns> adresySubjektu) {
    
    this.adresySubjektu = adresySubjektu;
    return this;
  }

  public ZaznamRcnsZakladAllOf addAdresySubjektuItem(AdresaRcns adresySubjektuItem) {
    if (this.adresySubjektu == null) {
      this.adresySubjektu = new ArrayList<>();
    }
    this.adresySubjektu.add(adresySubjektuItem);
    return this;
  }

   /**
   * Get adresySubjektu
   * @return adresySubjektu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AdresaRcns> getAdresySubjektu() {
    return adresySubjektu;
  }


  public void setAdresySubjektu(List<AdresaRcns> adresySubjektu) {
    this.adresySubjektu = adresySubjektu;
  }


  public ZaznamRcnsZakladAllOf zdrojId(String zdrojId) {
    
    this.zdrojId = zdrojId;
    return this;
  }

   /**
   * Identifikátor záznamu ve zdrojovém registru.
   * @return zdrojId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifikátor záznamu ve zdrojovém registru.")

  public String getZdrojId() {
    return zdrojId;
  }


  public void setZdrojId(String zdrojId) {
    this.zdrojId = zdrojId;
  }


  public ZaznamRcnsZakladAllOf platnostOd(LocalDate platnostOd) {
    
    this.platnostOd = platnostOd;
    return this;
  }

   /**
   * Platnost subjekt v registru od
   * @return platnostOd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Platnost subjekt v registru od")

  public LocalDate getPlatnostOd() {
    return platnostOd;
  }


  public void setPlatnostOd(LocalDate platnostOd) {
    this.platnostOd = platnostOd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZaznamRcnsZakladAllOf zaznamRcnsZakladAllOf = (ZaznamRcnsZakladAllOf) o;
    return Objects.equals(this.typSubjektu, zaznamRcnsZakladAllOf.typSubjektu) &&
        Objects.equals(this.stat, zaznamRcnsZakladAllOf.stat) &&
        Objects.equals(this.primarniZaznam, zaznamRcnsZakladAllOf.primarniZaznam) &&
        Objects.equals(this.registrace, zaznamRcnsZakladAllOf.registrace) &&
        Objects.equals(this.zpusobJednani, zaznamRcnsZakladAllOf.zpusobJednani) &&
        Objects.equals(this.adresySubjektu, zaznamRcnsZakladAllOf.adresySubjektu) &&
        Objects.equals(this.zdrojId, zaznamRcnsZakladAllOf.zdrojId) &&
        Objects.equals(this.platnostOd, zaznamRcnsZakladAllOf.platnostOd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typSubjektu, stat, primarniZaznam, registrace, zpusobJednani, adresySubjektu, zdrojId, platnostOd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZaznamRcnsZakladAllOf {\n");
    sb.append("    typSubjektu: ").append(toIndentedString(typSubjektu)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    primarniZaznam: ").append(toIndentedString(primarniZaznam)).append("\n");
    sb.append("    registrace: ").append(toIndentedString(registrace)).append("\n");
    sb.append("    zpusobJednani: ").append(toIndentedString(zpusobJednani)).append("\n");
    sb.append("    adresySubjektu: ").append(toIndentedString(adresySubjektu)).append("\n");
    sb.append("    zdrojId: ").append(toIndentedString(zdrojId)).append("\n");
    sb.append("    platnostOd: ").append(toIndentedString(platnostOd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("typSubjektu");
    openapiFields.add("stat");
    openapiFields.add("primarniZaznam");
    openapiFields.add("registrace");
    openapiFields.add("zpusobJednani");
    openapiFields.add("adresySubjektu");
    openapiFields.add("zdrojId");
    openapiFields.add("platnostOd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZaznamRcnsZakladAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ZaznamRcnsZakladAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZaznamRcnsZakladAllOf is not found in the empty JSON string", ZaznamRcnsZakladAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ZaznamRcnsZakladAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZaznamRcnsZakladAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("typSubjektu") != null && !jsonObj.get("typSubjektu").isJsonNull()) && !jsonObj.get("typSubjektu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typSubjektu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typSubjektu").toString()));
      }
      if ((jsonObj.get("stat") != null && !jsonObj.get("stat").isJsonNull()) && !jsonObj.get("stat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stat").toString()));
      }
      // validate the optional field `registrace`
      if (jsonObj.get("registrace") != null && !jsonObj.get("registrace").isJsonNull()) {
        RegistraceRcns.validateJsonObject(jsonObj.getAsJsonObject("registrace"));
      }
      if (jsonObj.get("zpusobJednani") != null && !jsonObj.get("zpusobJednani").isJsonNull()) {
        JsonArray jsonArrayzpusobJednani = jsonObj.getAsJsonArray("zpusobJednani");
        if (jsonArrayzpusobJednani != null) {
          // ensure the json data is an array
          if (!jsonObj.get("zpusobJednani").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `zpusobJednani` to be an array in the JSON string but got `%s`", jsonObj.get("zpusobJednani").toString()));
          }

          // validate the optional field `zpusobJednani` (array)
          for (int i = 0; i < jsonArrayzpusobJednani.size(); i++) {
            ZpusobJednani.validateJsonObject(jsonArrayzpusobJednani.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("adresySubjektu") != null && !jsonObj.get("adresySubjektu").isJsonNull()) {
        JsonArray jsonArrayadresySubjektu = jsonObj.getAsJsonArray("adresySubjektu");
        if (jsonArrayadresySubjektu != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adresySubjektu").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adresySubjektu` to be an array in the JSON string but got `%s`", jsonObj.get("adresySubjektu").toString()));
          }

          // validate the optional field `adresySubjektu` (array)
          for (int i = 0; i < jsonArrayadresySubjektu.size(); i++) {
            AdresaRcns.validateJsonObject(jsonArrayadresySubjektu.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("zdrojId") != null && !jsonObj.get("zdrojId").isJsonNull()) && !jsonObj.get("zdrojId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zdrojId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zdrojId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZaznamRcnsZakladAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZaznamRcnsZakladAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZaznamRcnsZakladAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZaznamRcnsZakladAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ZaznamRcnsZakladAllOf>() {
           @Override
           public void write(JsonWriter out, ZaznamRcnsZakladAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZaznamRcnsZakladAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZaznamRcnsZakladAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZaznamRcnsZakladAllOf
  * @throws IOException if the JSON string is invalid with respect to ZaznamRcnsZakladAllOf
  */
  public static ZaznamRcnsZakladAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZaznamRcnsZakladAllOf.class);
  }

 /**
  * Convert an instance of ZaznamRcnsZakladAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

