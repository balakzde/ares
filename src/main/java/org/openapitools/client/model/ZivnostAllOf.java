/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AngazovanaOsobaRzp;
import org.openapitools.client.model.Provozovna;
import org.openapitools.client.model.ZivnostOborCinnosti;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZivnostAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class ZivnostAllOf {
  public static final String SERIALIZED_NAME_OBORY_CINNOSTI = "oboryCinnosti";
  @SerializedName(SERIALIZED_NAME_OBORY_CINNOSTI)
  private List<ZivnostOborCinnosti> oboryCinnosti = null;

  public static final String SERIALIZED_NAME_ODPOVEDNI_ZASTUPCI = "odpovedniZastupci";
  @SerializedName(SERIALIZED_NAME_ODPOVEDNI_ZASTUPCI)
  private List<AngazovanaOsobaRzp> odpovedniZastupci = null;

  public static final String SERIALIZED_NAME_PROVOZOVNY = "provozovny";
  @SerializedName(SERIALIZED_NAME_PROVOZOVNY)
  private List<Provozovna> provozovny = null;

  public ZivnostAllOf() {
  }

  public ZivnostAllOf oboryCinnosti(List<ZivnostOborCinnosti> oboryCinnosti) {
    
    this.oboryCinnosti = oboryCinnosti;
    return this;
  }

  public ZivnostAllOf addOboryCinnostiItem(ZivnostOborCinnosti oboryCinnostiItem) {
    if (this.oboryCinnosti == null) {
      this.oboryCinnosti = new ArrayList<>();
    }
    this.oboryCinnosti.add(oboryCinnostiItem);
    return this;
  }

   /**
   * Get oboryCinnosti
   * @return oboryCinnosti
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ZivnostOborCinnosti> getOboryCinnosti() {
    return oboryCinnosti;
  }


  public void setOboryCinnosti(List<ZivnostOborCinnosti> oboryCinnosti) {
    this.oboryCinnosti = oboryCinnosti;
  }


  public ZivnostAllOf odpovedniZastupci(List<AngazovanaOsobaRzp> odpovedniZastupci) {
    
    this.odpovedniZastupci = odpovedniZastupci;
    return this;
  }

  public ZivnostAllOf addOdpovedniZastupciItem(AngazovanaOsobaRzp odpovedniZastupciItem) {
    if (this.odpovedniZastupci == null) {
      this.odpovedniZastupci = new ArrayList<>();
    }
    this.odpovedniZastupci.add(odpovedniZastupciItem);
    return this;
  }

   /**
   * Get odpovedniZastupci
   * @return odpovedniZastupci
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AngazovanaOsobaRzp> getOdpovedniZastupci() {
    return odpovedniZastupci;
  }


  public void setOdpovedniZastupci(List<AngazovanaOsobaRzp> odpovedniZastupci) {
    this.odpovedniZastupci = odpovedniZastupci;
  }


  public ZivnostAllOf provozovny(List<Provozovna> provozovny) {
    
    this.provozovny = provozovny;
    return this;
  }

  public ZivnostAllOf addProvozovnyItem(Provozovna provozovnyItem) {
    if (this.provozovny == null) {
      this.provozovny = new ArrayList<>();
    }
    this.provozovny.add(provozovnyItem);
    return this;
  }

   /**
   * Get provozovny
   * @return provozovny
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Provozovna> getProvozovny() {
    return provozovny;
  }


  public void setProvozovny(List<Provozovna> provozovny) {
    this.provozovny = provozovny;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZivnostAllOf zivnostAllOf = (ZivnostAllOf) o;
    return Objects.equals(this.oboryCinnosti, zivnostAllOf.oboryCinnosti) &&
        Objects.equals(this.odpovedniZastupci, zivnostAllOf.odpovedniZastupci) &&
        Objects.equals(this.provozovny, zivnostAllOf.provozovny);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oboryCinnosti, odpovedniZastupci, provozovny);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZivnostAllOf {\n");
    sb.append("    oboryCinnosti: ").append(toIndentedString(oboryCinnosti)).append("\n");
    sb.append("    odpovedniZastupci: ").append(toIndentedString(odpovedniZastupci)).append("\n");
    sb.append("    provozovny: ").append(toIndentedString(provozovny)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oboryCinnosti");
    openapiFields.add("odpovedniZastupci");
    openapiFields.add("provozovny");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZivnostAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ZivnostAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZivnostAllOf is not found in the empty JSON string", ZivnostAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ZivnostAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZivnostAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("oboryCinnosti") != null && !jsonObj.get("oboryCinnosti").isJsonNull()) {
        JsonArray jsonArrayoboryCinnosti = jsonObj.getAsJsonArray("oboryCinnosti");
        if (jsonArrayoboryCinnosti != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oboryCinnosti").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oboryCinnosti` to be an array in the JSON string but got `%s`", jsonObj.get("oboryCinnosti").toString()));
          }

          // validate the optional field `oboryCinnosti` (array)
          for (int i = 0; i < jsonArrayoboryCinnosti.size(); i++) {
            ZivnostOborCinnosti.validateJsonObject(jsonArrayoboryCinnosti.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("odpovedniZastupci") != null && !jsonObj.get("odpovedniZastupci").isJsonNull()) {
        JsonArray jsonArrayodpovedniZastupci = jsonObj.getAsJsonArray("odpovedniZastupci");
        if (jsonArrayodpovedniZastupci != null) {
          // ensure the json data is an array
          if (!jsonObj.get("odpovedniZastupci").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `odpovedniZastupci` to be an array in the JSON string but got `%s`", jsonObj.get("odpovedniZastupci").toString()));
          }

          // validate the optional field `odpovedniZastupci` (array)
          for (int i = 0; i < jsonArrayodpovedniZastupci.size(); i++) {
            AngazovanaOsobaRzp.validateJsonObject(jsonArrayodpovedniZastupci.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("provozovny") != null && !jsonObj.get("provozovny").isJsonNull()) {
        JsonArray jsonArrayprovozovny = jsonObj.getAsJsonArray("provozovny");
        if (jsonArrayprovozovny != null) {
          // ensure the json data is an array
          if (!jsonObj.get("provozovny").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `provozovny` to be an array in the JSON string but got `%s`", jsonObj.get("provozovny").toString()));
          }

          // validate the optional field `provozovny` (array)
          for (int i = 0; i < jsonArrayprovozovny.size(); i++) {
            Provozovna.validateJsonObject(jsonArrayprovozovny.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZivnostAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZivnostAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZivnostAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZivnostAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ZivnostAllOf>() {
           @Override
           public void write(JsonWriter out, ZivnostAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZivnostAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZivnostAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZivnostAllOf
  * @throws IOException if the JSON string is invalid with respect to ZivnostAllOf
  */
  public static ZivnostAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZivnostAllOf.class);
  }

 /**
  * Convert an instance of ZivnostAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

