/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SpolecnikVr;
import org.openapitools.client.model.SpolecnyPodilVr;
import org.openapitools.client.model.UvolnenyPodilVr;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpolecniciVrAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class SpolecniciVrAllOf {
  public static final String SERIALIZED_NAME_NAZEV_ORGANU = "nazevOrganu";
  @SerializedName(SERIALIZED_NAME_NAZEV_ORGANU)
  private String nazevOrganu;

  public static final String SERIALIZED_NAME_SPOLECNIK = "spolecnik";
  @SerializedName(SERIALIZED_NAME_SPOLECNIK)
  private List<SpolecnikVr> spolecnik = null;

  public static final String SERIALIZED_NAME_SPOLECNY_PODIL = "spolecnyPodil";
  @SerializedName(SERIALIZED_NAME_SPOLECNY_PODIL)
  private List<SpolecnyPodilVr> spolecnyPodil = null;

  public static final String SERIALIZED_NAME_TYP_ORGANU = "typOrganu";
  @SerializedName(SERIALIZED_NAME_TYP_ORGANU)
  private String typOrganu;

  public static final String SERIALIZED_NAME_UVOLNENY_PODIL = "uvolnenyPodil";
  @SerializedName(SERIALIZED_NAME_UVOLNENY_PODIL)
  private List<UvolnenyPodilVr> uvolnenyPodil = null;

  public static final String SERIALIZED_NAME_NAZEV = "nazev";
  @SerializedName(SERIALIZED_NAME_NAZEV)
  private String nazev;

  public SpolecniciVrAllOf() {
  }

  public SpolecniciVrAllOf nazevOrganu(String nazevOrganu) {
    
    this.nazevOrganu = nazevOrganu;
    return this;
  }

   /**
   * Název orgánu - nestandardní
   * @return nazevOrganu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Název orgánu - nestandardní")

  public String getNazevOrganu() {
    return nazevOrganu;
  }


  public void setNazevOrganu(String nazevOrganu) {
    this.nazevOrganu = nazevOrganu;
  }


  public SpolecniciVrAllOf spolecnik(List<SpolecnikVr> spolecnik) {
    
    this.spolecnik = spolecnik;
    return this;
  }

  public SpolecniciVrAllOf addSpolecnikItem(SpolecnikVr spolecnikItem) {
    if (this.spolecnik == null) {
      this.spolecnik = new ArrayList<>();
    }
    this.spolecnik.add(spolecnikItem);
    return this;
  }

   /**
   * Get spolecnik
   * @return spolecnik
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SpolecnikVr> getSpolecnik() {
    return spolecnik;
  }


  public void setSpolecnik(List<SpolecnikVr> spolecnik) {
    this.spolecnik = spolecnik;
  }


  public SpolecniciVrAllOf spolecnyPodil(List<SpolecnyPodilVr> spolecnyPodil) {
    
    this.spolecnyPodil = spolecnyPodil;
    return this;
  }

  public SpolecniciVrAllOf addSpolecnyPodilItem(SpolecnyPodilVr spolecnyPodilItem) {
    if (this.spolecnyPodil == null) {
      this.spolecnyPodil = new ArrayList<>();
    }
    this.spolecnyPodil.add(spolecnyPodilItem);
    return this;
  }

   /**
   * Get spolecnyPodil
   * @return spolecnyPodil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SpolecnyPodilVr> getSpolecnyPodil() {
    return spolecnyPodil;
  }


  public void setSpolecnyPodil(List<SpolecnyPodilVr> spolecnyPodil) {
    this.spolecnyPodil = spolecnyPodil;
  }


  public SpolecniciVrAllOf typOrganu(String typOrganu) {
    
    this.typOrganu = typOrganu;
    return this;
  }

   /**
   * Typ orgánu - kód (ciselnikKod: TypOrganu, zdroj: vr) 
   * @return typOrganu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Typ orgánu - kód (ciselnikKod: TypOrganu, zdroj: vr) ")

  public String getTypOrganu() {
    return typOrganu;
  }


  public void setTypOrganu(String typOrganu) {
    this.typOrganu = typOrganu;
  }


  public SpolecniciVrAllOf uvolnenyPodil(List<UvolnenyPodilVr> uvolnenyPodil) {
    
    this.uvolnenyPodil = uvolnenyPodil;
    return this;
  }

  public SpolecniciVrAllOf addUvolnenyPodilItem(UvolnenyPodilVr uvolnenyPodilItem) {
    if (this.uvolnenyPodil == null) {
      this.uvolnenyPodil = new ArrayList<>();
    }
    this.uvolnenyPodil.add(uvolnenyPodilItem);
    return this;
  }

   /**
   * Get uvolnenyPodil
   * @return uvolnenyPodil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<UvolnenyPodilVr> getUvolnenyPodil() {
    return uvolnenyPodil;
  }


  public void setUvolnenyPodil(List<UvolnenyPodilVr> uvolnenyPodil) {
    this.uvolnenyPodil = uvolnenyPodil;
  }


  public SpolecniciVrAllOf nazev(String nazev) {
    
    this.nazev = nazev;
    return this;
  }

   /**
   * Název orgánu - nestandardní
   * @return nazev
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Název orgánu - nestandardní")

  public String getNazev() {
    return nazev;
  }


  public void setNazev(String nazev) {
    this.nazev = nazev;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpolecniciVrAllOf spolecniciVrAllOf = (SpolecniciVrAllOf) o;
    return Objects.equals(this.nazevOrganu, spolecniciVrAllOf.nazevOrganu) &&
        Objects.equals(this.spolecnik, spolecniciVrAllOf.spolecnik) &&
        Objects.equals(this.spolecnyPodil, spolecniciVrAllOf.spolecnyPodil) &&
        Objects.equals(this.typOrganu, spolecniciVrAllOf.typOrganu) &&
        Objects.equals(this.uvolnenyPodil, spolecniciVrAllOf.uvolnenyPodil) &&
        Objects.equals(this.nazev, spolecniciVrAllOf.nazev);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nazevOrganu, spolecnik, spolecnyPodil, typOrganu, uvolnenyPodil, nazev);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpolecniciVrAllOf {\n");
    sb.append("    nazevOrganu: ").append(toIndentedString(nazevOrganu)).append("\n");
    sb.append("    spolecnik: ").append(toIndentedString(spolecnik)).append("\n");
    sb.append("    spolecnyPodil: ").append(toIndentedString(spolecnyPodil)).append("\n");
    sb.append("    typOrganu: ").append(toIndentedString(typOrganu)).append("\n");
    sb.append("    uvolnenyPodil: ").append(toIndentedString(uvolnenyPodil)).append("\n");
    sb.append("    nazev: ").append(toIndentedString(nazev)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nazevOrganu");
    openapiFields.add("spolecnik");
    openapiFields.add("spolecnyPodil");
    openapiFields.add("typOrganu");
    openapiFields.add("uvolnenyPodil");
    openapiFields.add("nazev");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SpolecniciVrAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SpolecniciVrAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpolecniciVrAllOf is not found in the empty JSON string", SpolecniciVrAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SpolecniciVrAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpolecniciVrAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("nazevOrganu") != null && !jsonObj.get("nazevOrganu").isJsonNull()) && !jsonObj.get("nazevOrganu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nazevOrganu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nazevOrganu").toString()));
      }
      if (jsonObj.get("spolecnik") != null && !jsonObj.get("spolecnik").isJsonNull()) {
        JsonArray jsonArrayspolecnik = jsonObj.getAsJsonArray("spolecnik");
        if (jsonArrayspolecnik != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spolecnik").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spolecnik` to be an array in the JSON string but got `%s`", jsonObj.get("spolecnik").toString()));
          }

          // validate the optional field `spolecnik` (array)
          for (int i = 0; i < jsonArrayspolecnik.size(); i++) {
            SpolecnikVr.validateJsonObject(jsonArrayspolecnik.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("spolecnyPodil") != null && !jsonObj.get("spolecnyPodil").isJsonNull()) {
        JsonArray jsonArrayspolecnyPodil = jsonObj.getAsJsonArray("spolecnyPodil");
        if (jsonArrayspolecnyPodil != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spolecnyPodil").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spolecnyPodil` to be an array in the JSON string but got `%s`", jsonObj.get("spolecnyPodil").toString()));
          }

          // validate the optional field `spolecnyPodil` (array)
          for (int i = 0; i < jsonArrayspolecnyPodil.size(); i++) {
            SpolecnyPodilVr.validateJsonObject(jsonArrayspolecnyPodil.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("typOrganu") != null && !jsonObj.get("typOrganu").isJsonNull()) && !jsonObj.get("typOrganu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typOrganu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typOrganu").toString()));
      }
      if (jsonObj.get("uvolnenyPodil") != null && !jsonObj.get("uvolnenyPodil").isJsonNull()) {
        JsonArray jsonArrayuvolnenyPodil = jsonObj.getAsJsonArray("uvolnenyPodil");
        if (jsonArrayuvolnenyPodil != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uvolnenyPodil").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uvolnenyPodil` to be an array in the JSON string but got `%s`", jsonObj.get("uvolnenyPodil").toString()));
          }

          // validate the optional field `uvolnenyPodil` (array)
          for (int i = 0; i < jsonArrayuvolnenyPodil.size(); i++) {
            UvolnenyPodilVr.validateJsonObject(jsonArrayuvolnenyPodil.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("nazev") != null && !jsonObj.get("nazev").isJsonNull()) && !jsonObj.get("nazev").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nazev` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nazev").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpolecniciVrAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpolecniciVrAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpolecniciVrAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpolecniciVrAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<SpolecniciVrAllOf>() {
           @Override
           public void write(JsonWriter out, SpolecniciVrAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpolecniciVrAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SpolecniciVrAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SpolecniciVrAllOf
  * @throws IOException if the JSON string is invalid with respect to SpolecniciVrAllOf
  */
  public static SpolecniciVrAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpolecniciVrAllOf.class);
  }

 /**
  * Convert an instance of SpolecniciVrAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

