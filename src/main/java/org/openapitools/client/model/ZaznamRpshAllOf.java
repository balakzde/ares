/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AngazovanaOsobaRpsh;
import org.openapitools.client.model.StatutarniOrgan;
import org.openapitools.client.model.StavSubjektu;
import org.openapitools.client.model.ZmenaStanov;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZaznamRpshAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class ZaznamRpshAllOf {
  public static final String SERIALIZED_NAME_CISLO_REGISTRACE = "cisloRegistrace";
  @SerializedName(SERIALIZED_NAME_CISLO_REGISTRACE)
  private String cisloRegistrace;

  public static final String SERIALIZED_NAME_TYP_SUBJEKTU = "typSubjektu";
  @SerializedName(SERIALIZED_NAME_TYP_SUBJEKTU)
  private String typSubjektu;

  public static final String SERIALIZED_NAME_OBCHODNI_JMENO_ZKRATKA = "obchodniJmenoZkratka";
  @SerializedName(SERIALIZED_NAME_OBCHODNI_JMENO_ZKRATKA)
  private String obchodniJmenoZkratka;

  public static final String SERIALIZED_NAME_ANGAZOVANE_OSOBY = "angazovaneOsoby";
  @SerializedName(SERIALIZED_NAME_ANGAZOVANE_OSOBY)
  private List<AngazovanaOsobaRpsh> angazovaneOsoby = null;

  public static final String SERIALIZED_NAME_PRIMARNI_ZAZNAM = "primarniZaznam";
  @SerializedName(SERIALIZED_NAME_PRIMARNI_ZAZNAM)
  private Boolean primarniZaznam;

  public static final String SERIALIZED_NAME_ZMENA_STANOV = "zmenaStanov";
  @SerializedName(SERIALIZED_NAME_ZMENA_STANOV)
  private List<ZmenaStanov> zmenaStanov = null;

  public static final String SERIALIZED_NAME_STATUTARNI_ORGAN = "statutarniOrgan";
  @SerializedName(SERIALIZED_NAME_STATUTARNI_ORGAN)
  private List<StatutarniOrgan> statutarniOrgan = null;

  public static final String SERIALIZED_NAME_STAV_SUBJEKTU = "stavSubjektu";
  @SerializedName(SERIALIZED_NAME_STAV_SUBJEKTU)
  private List<StavSubjektu> stavSubjektu = null;

  public ZaznamRpshAllOf() {
  }

  public ZaznamRpshAllOf cisloRegistrace(String cisloRegistrace) {
    
    this.cisloRegistrace = cisloRegistrace;
    return this;
  }

   /**
   * Číslo registrace
   * @return cisloRegistrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Číslo registrace")

  public String getCisloRegistrace() {
    return cisloRegistrace;
  }


  public void setCisloRegistrace(String cisloRegistrace) {
    this.cisloRegistrace = cisloRegistrace;
  }


  public ZaznamRpshAllOf typSubjektu(String typSubjektu) {
    
    this.typSubjektu = typSubjektu;
    return this;
  }

   /**
   * Typ subjektu - strana/hnutí - kód (ciselnikKod: TypSubjektuRpsh) 
   * @return typSubjektu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Typ subjektu - strana/hnutí - kód (ciselnikKod: TypSubjektuRpsh) ")

  public String getTypSubjektu() {
    return typSubjektu;
  }


  public void setTypSubjektu(String typSubjektu) {
    this.typSubjektu = typSubjektu;
  }


  public ZaznamRpshAllOf obchodniJmenoZkratka(String obchodniJmenoZkratka) {
    
    this.obchodniJmenoZkratka = obchodniJmenoZkratka;
    return this;
  }

   /**
   * Obchodní jméno zkrácené
   * @return obchodniJmenoZkratka
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Obchodní jméno zkrácené")

  public String getObchodniJmenoZkratka() {
    return obchodniJmenoZkratka;
  }


  public void setObchodniJmenoZkratka(String obchodniJmenoZkratka) {
    this.obchodniJmenoZkratka = obchodniJmenoZkratka;
  }


  public ZaznamRpshAllOf angazovaneOsoby(List<AngazovanaOsobaRpsh> angazovaneOsoby) {
    
    this.angazovaneOsoby = angazovaneOsoby;
    return this;
  }

  public ZaznamRpshAllOf addAngazovaneOsobyItem(AngazovanaOsobaRpsh angazovaneOsobyItem) {
    if (this.angazovaneOsoby == null) {
      this.angazovaneOsoby = new ArrayList<>();
    }
    this.angazovaneOsoby.add(angazovaneOsobyItem);
    return this;
  }

   /**
   * Get angazovaneOsoby
   * @return angazovaneOsoby
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AngazovanaOsobaRpsh> getAngazovaneOsoby() {
    return angazovaneOsoby;
  }


  public void setAngazovaneOsoby(List<AngazovanaOsobaRpsh> angazovaneOsoby) {
    this.angazovaneOsoby = angazovaneOsoby;
  }


  public ZaznamRpshAllOf primarniZaznam(Boolean primarniZaznam) {
    
    this.primarniZaznam = primarniZaznam;
    return this;
  }

   /**
   * Get primarniZaznam
   * @return primarniZaznam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPrimarniZaznam() {
    return primarniZaznam;
  }


  public void setPrimarniZaznam(Boolean primarniZaznam) {
    this.primarniZaznam = primarniZaznam;
  }


  public ZaznamRpshAllOf zmenaStanov(List<ZmenaStanov> zmenaStanov) {
    
    this.zmenaStanov = zmenaStanov;
    return this;
  }

  public ZaznamRpshAllOf addZmenaStanovItem(ZmenaStanov zmenaStanovItem) {
    if (this.zmenaStanov == null) {
      this.zmenaStanov = new ArrayList<>();
    }
    this.zmenaStanov.add(zmenaStanovItem);
    return this;
  }

   /**
   * Get zmenaStanov
   * @return zmenaStanov
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ZmenaStanov> getZmenaStanov() {
    return zmenaStanov;
  }


  public void setZmenaStanov(List<ZmenaStanov> zmenaStanov) {
    this.zmenaStanov = zmenaStanov;
  }


  public ZaznamRpshAllOf statutarniOrgan(List<StatutarniOrgan> statutarniOrgan) {
    
    this.statutarniOrgan = statutarniOrgan;
    return this;
  }

  public ZaznamRpshAllOf addStatutarniOrganItem(StatutarniOrgan statutarniOrganItem) {
    if (this.statutarniOrgan == null) {
      this.statutarniOrgan = new ArrayList<>();
    }
    this.statutarniOrgan.add(statutarniOrganItem);
    return this;
  }

   /**
   * Get statutarniOrgan
   * @return statutarniOrgan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<StatutarniOrgan> getStatutarniOrgan() {
    return statutarniOrgan;
  }


  public void setStatutarniOrgan(List<StatutarniOrgan> statutarniOrgan) {
    this.statutarniOrgan = statutarniOrgan;
  }


  public ZaznamRpshAllOf stavSubjektu(List<StavSubjektu> stavSubjektu) {
    
    this.stavSubjektu = stavSubjektu;
    return this;
  }

  public ZaznamRpshAllOf addStavSubjektuItem(StavSubjektu stavSubjektuItem) {
    if (this.stavSubjektu == null) {
      this.stavSubjektu = new ArrayList<>();
    }
    this.stavSubjektu.add(stavSubjektuItem);
    return this;
  }

   /**
   * Get stavSubjektu
   * @return stavSubjektu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<StavSubjektu> getStavSubjektu() {
    return stavSubjektu;
  }


  public void setStavSubjektu(List<StavSubjektu> stavSubjektu) {
    this.stavSubjektu = stavSubjektu;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZaznamRpshAllOf zaznamRpshAllOf = (ZaznamRpshAllOf) o;
    return Objects.equals(this.cisloRegistrace, zaznamRpshAllOf.cisloRegistrace) &&
        Objects.equals(this.typSubjektu, zaznamRpshAllOf.typSubjektu) &&
        Objects.equals(this.obchodniJmenoZkratka, zaznamRpshAllOf.obchodniJmenoZkratka) &&
        Objects.equals(this.angazovaneOsoby, zaznamRpshAllOf.angazovaneOsoby) &&
        Objects.equals(this.primarniZaznam, zaznamRpshAllOf.primarniZaznam) &&
        Objects.equals(this.zmenaStanov, zaznamRpshAllOf.zmenaStanov) &&
        Objects.equals(this.statutarniOrgan, zaznamRpshAllOf.statutarniOrgan) &&
        Objects.equals(this.stavSubjektu, zaznamRpshAllOf.stavSubjektu);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cisloRegistrace, typSubjektu, obchodniJmenoZkratka, angazovaneOsoby, primarniZaznam, zmenaStanov, statutarniOrgan, stavSubjektu);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZaznamRpshAllOf {\n");
    sb.append("    cisloRegistrace: ").append(toIndentedString(cisloRegistrace)).append("\n");
    sb.append("    typSubjektu: ").append(toIndentedString(typSubjektu)).append("\n");
    sb.append("    obchodniJmenoZkratka: ").append(toIndentedString(obchodniJmenoZkratka)).append("\n");
    sb.append("    angazovaneOsoby: ").append(toIndentedString(angazovaneOsoby)).append("\n");
    sb.append("    primarniZaznam: ").append(toIndentedString(primarniZaznam)).append("\n");
    sb.append("    zmenaStanov: ").append(toIndentedString(zmenaStanov)).append("\n");
    sb.append("    statutarniOrgan: ").append(toIndentedString(statutarniOrgan)).append("\n");
    sb.append("    stavSubjektu: ").append(toIndentedString(stavSubjektu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cisloRegistrace");
    openapiFields.add("typSubjektu");
    openapiFields.add("obchodniJmenoZkratka");
    openapiFields.add("angazovaneOsoby");
    openapiFields.add("primarniZaznam");
    openapiFields.add("zmenaStanov");
    openapiFields.add("statutarniOrgan");
    openapiFields.add("stavSubjektu");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZaznamRpshAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ZaznamRpshAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZaznamRpshAllOf is not found in the empty JSON string", ZaznamRpshAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ZaznamRpshAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZaznamRpshAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cisloRegistrace") != null && !jsonObj.get("cisloRegistrace").isJsonNull()) && !jsonObj.get("cisloRegistrace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cisloRegistrace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cisloRegistrace").toString()));
      }
      if ((jsonObj.get("typSubjektu") != null && !jsonObj.get("typSubjektu").isJsonNull()) && !jsonObj.get("typSubjektu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typSubjektu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typSubjektu").toString()));
      }
      if ((jsonObj.get("obchodniJmenoZkratka") != null && !jsonObj.get("obchodniJmenoZkratka").isJsonNull()) && !jsonObj.get("obchodniJmenoZkratka").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obchodniJmenoZkratka` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obchodniJmenoZkratka").toString()));
      }
      if (jsonObj.get("angazovaneOsoby") != null && !jsonObj.get("angazovaneOsoby").isJsonNull()) {
        JsonArray jsonArrayangazovaneOsoby = jsonObj.getAsJsonArray("angazovaneOsoby");
        if (jsonArrayangazovaneOsoby != null) {
          // ensure the json data is an array
          if (!jsonObj.get("angazovaneOsoby").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `angazovaneOsoby` to be an array in the JSON string but got `%s`", jsonObj.get("angazovaneOsoby").toString()));
          }

          // validate the optional field `angazovaneOsoby` (array)
          for (int i = 0; i < jsonArrayangazovaneOsoby.size(); i++) {
            AngazovanaOsobaRpsh.validateJsonObject(jsonArrayangazovaneOsoby.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("zmenaStanov") != null && !jsonObj.get("zmenaStanov").isJsonNull()) {
        JsonArray jsonArrayzmenaStanov = jsonObj.getAsJsonArray("zmenaStanov");
        if (jsonArrayzmenaStanov != null) {
          // ensure the json data is an array
          if (!jsonObj.get("zmenaStanov").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `zmenaStanov` to be an array in the JSON string but got `%s`", jsonObj.get("zmenaStanov").toString()));
          }

          // validate the optional field `zmenaStanov` (array)
          for (int i = 0; i < jsonArrayzmenaStanov.size(); i++) {
            ZmenaStanov.validateJsonObject(jsonArrayzmenaStanov.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("statutarniOrgan") != null && !jsonObj.get("statutarniOrgan").isJsonNull()) {
        JsonArray jsonArraystatutarniOrgan = jsonObj.getAsJsonArray("statutarniOrgan");
        if (jsonArraystatutarniOrgan != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statutarniOrgan").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statutarniOrgan` to be an array in the JSON string but got `%s`", jsonObj.get("statutarniOrgan").toString()));
          }

          // validate the optional field `statutarniOrgan` (array)
          for (int i = 0; i < jsonArraystatutarniOrgan.size(); i++) {
            StatutarniOrgan.validateJsonObject(jsonArraystatutarniOrgan.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("stavSubjektu") != null && !jsonObj.get("stavSubjektu").isJsonNull()) {
        JsonArray jsonArraystavSubjektu = jsonObj.getAsJsonArray("stavSubjektu");
        if (jsonArraystavSubjektu != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stavSubjektu").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stavSubjektu` to be an array in the JSON string but got `%s`", jsonObj.get("stavSubjektu").toString()));
          }

          // validate the optional field `stavSubjektu` (array)
          for (int i = 0; i < jsonArraystavSubjektu.size(); i++) {
            StavSubjektu.validateJsonObject(jsonArraystavSubjektu.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZaznamRpshAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZaznamRpshAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZaznamRpshAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZaznamRpshAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ZaznamRpshAllOf>() {
           @Override
           public void write(JsonWriter out, ZaznamRpshAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZaznamRpshAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZaznamRpshAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZaznamRpshAllOf
  * @throws IOException if the JSON string is invalid with respect to ZaznamRpshAllOf
  */
  public static ZaznamRpshAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZaznamRpshAllOf.class);
  }

 /**
  * Convert an instance of ZaznamRpshAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

