/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InsolvencniRizeniVr;
import org.openapitools.client.model.KonkursVr;
import org.openapitools.client.model.OdstepnyZavodVr;
import org.openapitools.client.model.OrganVr;
import org.openapitools.client.model.PodnikatelVr;
import org.openapitools.client.model.SpolecniciVr;
import org.openapitools.client.model.StatutarniOrganVr;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZaznamVrAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class ZaznamVrAllOf {
  public static final String SERIALIZED_NAME_OSTATNI_ORGANY = "ostatniOrgany";
  @SerializedName(SERIALIZED_NAME_OSTATNI_ORGANY)
  private List<OrganVr> ostatniOrgany = null;

  public static final String SERIALIZED_NAME_STATUTARNI_ORGANY = "statutarniOrgany";
  @SerializedName(SERIALIZED_NAME_STATUTARNI_ORGANY)
  private List<StatutarniOrganVr> statutarniOrgany = null;

  public static final String SERIALIZED_NAME_PODNIKATEL = "podnikatel";
  @SerializedName(SERIALIZED_NAME_PODNIKATEL)
  private List<PodnikatelVr> podnikatel = null;

  public static final String SERIALIZED_NAME_SPOLECNICI = "spolecnici";
  @SerializedName(SERIALIZED_NAME_SPOLECNICI)
  private List<SpolecniciVr> spolecnici = null;

  public static final String SERIALIZED_NAME_ODSTEPNE_ZAVODY = "odstepneZavody";
  @SerializedName(SERIALIZED_NAME_ODSTEPNE_ZAVODY)
  private List<OdstepnyZavodVr> odstepneZavody = null;

  public static final String SERIALIZED_NAME_INSOLVENCE = "insolvence";
  @SerializedName(SERIALIZED_NAME_INSOLVENCE)
  private List<InsolvencniRizeniVr> insolvence = null;

  public static final String SERIALIZED_NAME_KONKURSY = "konkursy";
  @SerializedName(SERIALIZED_NAME_KONKURSY)
  private List<KonkursVr> konkursy = null;

  public ZaznamVrAllOf() {
  }

  public ZaznamVrAllOf ostatniOrgany(List<OrganVr> ostatniOrgany) {
    
    this.ostatniOrgany = ostatniOrgany;
    return this;
  }

  public ZaznamVrAllOf addOstatniOrganyItem(OrganVr ostatniOrganyItem) {
    if (this.ostatniOrgany == null) {
      this.ostatniOrgany = new ArrayList<>();
    }
    this.ostatniOrgany.add(ostatniOrganyItem);
    return this;
  }

   /**
   * Get ostatniOrgany
   * @return ostatniOrgany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrganVr> getOstatniOrgany() {
    return ostatniOrgany;
  }


  public void setOstatniOrgany(List<OrganVr> ostatniOrgany) {
    this.ostatniOrgany = ostatniOrgany;
  }


  public ZaznamVrAllOf statutarniOrgany(List<StatutarniOrganVr> statutarniOrgany) {
    
    this.statutarniOrgany = statutarniOrgany;
    return this;
  }

  public ZaznamVrAllOf addStatutarniOrganyItem(StatutarniOrganVr statutarniOrganyItem) {
    if (this.statutarniOrgany == null) {
      this.statutarniOrgany = new ArrayList<>();
    }
    this.statutarniOrgany.add(statutarniOrganyItem);
    return this;
  }

   /**
   * Get statutarniOrgany
   * @return statutarniOrgany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<StatutarniOrganVr> getStatutarniOrgany() {
    return statutarniOrgany;
  }


  public void setStatutarniOrgany(List<StatutarniOrganVr> statutarniOrgany) {
    this.statutarniOrgany = statutarniOrgany;
  }


  public ZaznamVrAllOf podnikatel(List<PodnikatelVr> podnikatel) {
    
    this.podnikatel = podnikatel;
    return this;
  }

  public ZaznamVrAllOf addPodnikatelItem(PodnikatelVr podnikatelItem) {
    if (this.podnikatel == null) {
      this.podnikatel = new ArrayList<>();
    }
    this.podnikatel.add(podnikatelItem);
    return this;
  }

   /**
   * Get podnikatel
   * @return podnikatel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PodnikatelVr> getPodnikatel() {
    return podnikatel;
  }


  public void setPodnikatel(List<PodnikatelVr> podnikatel) {
    this.podnikatel = podnikatel;
  }


  public ZaznamVrAllOf spolecnici(List<SpolecniciVr> spolecnici) {
    
    this.spolecnici = spolecnici;
    return this;
  }

  public ZaznamVrAllOf addSpolecniciItem(SpolecniciVr spolecniciItem) {
    if (this.spolecnici == null) {
      this.spolecnici = new ArrayList<>();
    }
    this.spolecnici.add(spolecniciItem);
    return this;
  }

   /**
   * Get spolecnici
   * @return spolecnici
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SpolecniciVr> getSpolecnici() {
    return spolecnici;
  }


  public void setSpolecnici(List<SpolecniciVr> spolecnici) {
    this.spolecnici = spolecnici;
  }


  public ZaznamVrAllOf odstepneZavody(List<OdstepnyZavodVr> odstepneZavody) {
    
    this.odstepneZavody = odstepneZavody;
    return this;
  }

  public ZaznamVrAllOf addOdstepneZavodyItem(OdstepnyZavodVr odstepneZavodyItem) {
    if (this.odstepneZavody == null) {
      this.odstepneZavody = new ArrayList<>();
    }
    this.odstepneZavody.add(odstepneZavodyItem);
    return this;
  }

   /**
   * Get odstepneZavody
   * @return odstepneZavody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OdstepnyZavodVr> getOdstepneZavody() {
    return odstepneZavody;
  }


  public void setOdstepneZavody(List<OdstepnyZavodVr> odstepneZavody) {
    this.odstepneZavody = odstepneZavody;
  }


  public ZaznamVrAllOf insolvence(List<InsolvencniRizeniVr> insolvence) {
    
    this.insolvence = insolvence;
    return this;
  }

  public ZaznamVrAllOf addInsolvenceItem(InsolvencniRizeniVr insolvenceItem) {
    if (this.insolvence == null) {
      this.insolvence = new ArrayList<>();
    }
    this.insolvence.add(insolvenceItem);
    return this;
  }

   /**
   * Get insolvence
   * @return insolvence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InsolvencniRizeniVr> getInsolvence() {
    return insolvence;
  }


  public void setInsolvence(List<InsolvencniRizeniVr> insolvence) {
    this.insolvence = insolvence;
  }


  public ZaznamVrAllOf konkursy(List<KonkursVr> konkursy) {
    
    this.konkursy = konkursy;
    return this;
  }

  public ZaznamVrAllOf addKonkursyItem(KonkursVr konkursyItem) {
    if (this.konkursy == null) {
      this.konkursy = new ArrayList<>();
    }
    this.konkursy.add(konkursyItem);
    return this;
  }

   /**
   * Get konkursy
   * @return konkursy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<KonkursVr> getKonkursy() {
    return konkursy;
  }


  public void setKonkursy(List<KonkursVr> konkursy) {
    this.konkursy = konkursy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZaznamVrAllOf zaznamVrAllOf = (ZaznamVrAllOf) o;
    return Objects.equals(this.ostatniOrgany, zaznamVrAllOf.ostatniOrgany) &&
        Objects.equals(this.statutarniOrgany, zaznamVrAllOf.statutarniOrgany) &&
        Objects.equals(this.podnikatel, zaznamVrAllOf.podnikatel) &&
        Objects.equals(this.spolecnici, zaznamVrAllOf.spolecnici) &&
        Objects.equals(this.odstepneZavody, zaznamVrAllOf.odstepneZavody) &&
        Objects.equals(this.insolvence, zaznamVrAllOf.insolvence) &&
        Objects.equals(this.konkursy, zaznamVrAllOf.konkursy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ostatniOrgany, statutarniOrgany, podnikatel, spolecnici, odstepneZavody, insolvence, konkursy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZaznamVrAllOf {\n");
    sb.append("    ostatniOrgany: ").append(toIndentedString(ostatniOrgany)).append("\n");
    sb.append("    statutarniOrgany: ").append(toIndentedString(statutarniOrgany)).append("\n");
    sb.append("    podnikatel: ").append(toIndentedString(podnikatel)).append("\n");
    sb.append("    spolecnici: ").append(toIndentedString(spolecnici)).append("\n");
    sb.append("    odstepneZavody: ").append(toIndentedString(odstepneZavody)).append("\n");
    sb.append("    insolvence: ").append(toIndentedString(insolvence)).append("\n");
    sb.append("    konkursy: ").append(toIndentedString(konkursy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ostatniOrgany");
    openapiFields.add("statutarniOrgany");
    openapiFields.add("podnikatel");
    openapiFields.add("spolecnici");
    openapiFields.add("odstepneZavody");
    openapiFields.add("insolvence");
    openapiFields.add("konkursy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ZaznamVrAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ZaznamVrAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZaznamVrAllOf is not found in the empty JSON string", ZaznamVrAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ZaznamVrAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZaznamVrAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ostatniOrgany") != null && !jsonObj.get("ostatniOrgany").isJsonNull()) {
        JsonArray jsonArrayostatniOrgany = jsonObj.getAsJsonArray("ostatniOrgany");
        if (jsonArrayostatniOrgany != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ostatniOrgany").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ostatniOrgany` to be an array in the JSON string but got `%s`", jsonObj.get("ostatniOrgany").toString()));
          }

          // validate the optional field `ostatniOrgany` (array)
          for (int i = 0; i < jsonArrayostatniOrgany.size(); i++) {
            OrganVr.validateJsonObject(jsonArrayostatniOrgany.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("statutarniOrgany") != null && !jsonObj.get("statutarniOrgany").isJsonNull()) {
        JsonArray jsonArraystatutarniOrgany = jsonObj.getAsJsonArray("statutarniOrgany");
        if (jsonArraystatutarniOrgany != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statutarniOrgany").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statutarniOrgany` to be an array in the JSON string but got `%s`", jsonObj.get("statutarniOrgany").toString()));
          }

          // validate the optional field `statutarniOrgany` (array)
          for (int i = 0; i < jsonArraystatutarniOrgany.size(); i++) {
            StatutarniOrganVr.validateJsonObject(jsonArraystatutarniOrgany.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("podnikatel") != null && !jsonObj.get("podnikatel").isJsonNull()) {
        JsonArray jsonArraypodnikatel = jsonObj.getAsJsonArray("podnikatel");
        if (jsonArraypodnikatel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("podnikatel").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `podnikatel` to be an array in the JSON string but got `%s`", jsonObj.get("podnikatel").toString()));
          }

          // validate the optional field `podnikatel` (array)
          for (int i = 0; i < jsonArraypodnikatel.size(); i++) {
            PodnikatelVr.validateJsonObject(jsonArraypodnikatel.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("spolecnici") != null && !jsonObj.get("spolecnici").isJsonNull()) {
        JsonArray jsonArrayspolecnici = jsonObj.getAsJsonArray("spolecnici");
        if (jsonArrayspolecnici != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spolecnici").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spolecnici` to be an array in the JSON string but got `%s`", jsonObj.get("spolecnici").toString()));
          }

          // validate the optional field `spolecnici` (array)
          for (int i = 0; i < jsonArrayspolecnici.size(); i++) {
            SpolecniciVr.validateJsonObject(jsonArrayspolecnici.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("odstepneZavody") != null && !jsonObj.get("odstepneZavody").isJsonNull()) {
        JsonArray jsonArrayodstepneZavody = jsonObj.getAsJsonArray("odstepneZavody");
        if (jsonArrayodstepneZavody != null) {
          // ensure the json data is an array
          if (!jsonObj.get("odstepneZavody").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `odstepneZavody` to be an array in the JSON string but got `%s`", jsonObj.get("odstepneZavody").toString()));
          }

          // validate the optional field `odstepneZavody` (array)
          for (int i = 0; i < jsonArrayodstepneZavody.size(); i++) {
            OdstepnyZavodVr.validateJsonObject(jsonArrayodstepneZavody.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("insolvence") != null && !jsonObj.get("insolvence").isJsonNull()) {
        JsonArray jsonArrayinsolvence = jsonObj.getAsJsonArray("insolvence");
        if (jsonArrayinsolvence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("insolvence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `insolvence` to be an array in the JSON string but got `%s`", jsonObj.get("insolvence").toString()));
          }

          // validate the optional field `insolvence` (array)
          for (int i = 0; i < jsonArrayinsolvence.size(); i++) {
            InsolvencniRizeniVr.validateJsonObject(jsonArrayinsolvence.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("konkursy") != null && !jsonObj.get("konkursy").isJsonNull()) {
        JsonArray jsonArraykonkursy = jsonObj.getAsJsonArray("konkursy");
        if (jsonArraykonkursy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("konkursy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `konkursy` to be an array in the JSON string but got `%s`", jsonObj.get("konkursy").toString()));
          }

          // validate the optional field `konkursy` (array)
          for (int i = 0; i < jsonArraykonkursy.size(); i++) {
            KonkursVr.validateJsonObject(jsonArraykonkursy.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZaznamVrAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZaznamVrAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZaznamVrAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZaznamVrAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ZaznamVrAllOf>() {
           @Override
           public void write(JsonWriter out, ZaznamVrAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZaznamVrAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZaznamVrAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZaznamVrAllOf
  * @throws IOException if the JSON string is invalid with respect to ZaznamVrAllOf
  */
  public static ZaznamVrAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZaznamVrAllOf.class);
  }

 /**
  * Convert an instance of ZaznamVrAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

