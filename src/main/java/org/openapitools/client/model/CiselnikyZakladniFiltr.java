/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filtr pro vyhledávání číselníků
 */
@ApiModel(description = "Filtr pro vyhledávání číselníků")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class CiselnikyZakladniFiltr {
  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public static final String SERIALIZED_NAME_POCET = "pocet";
  @SerializedName(SERIALIZED_NAME_POCET)
  private Integer pocet;

  public static final String SERIALIZED_NAME_RAZENI = "razeni";
  @SerializedName(SERIALIZED_NAME_RAZENI)
  private List<String> razeni = null;

  public static final String SERIALIZED_NAME_ZDROJ_CISELNIKU = "zdrojCiselniku";
  @SerializedName(SERIALIZED_NAME_ZDROJ_CISELNIKU)
  private String zdrojCiselniku;

  public static final String SERIALIZED_NAME_KOD_CISELNIKU = "kodCiselniku";
  @SerializedName(SERIALIZED_NAME_KOD_CISELNIKU)
  private String kodCiselniku;

  public CiselnikyZakladniFiltr() {
  }

  public CiselnikyZakladniFiltr start(Integer start) {
    
    this.start = start;
    return this;
  }

   /**
   * Offset pro stránkování (poloha prvního vráceného prvku).
   * minimum: 0
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Offset pro stránkování (poloha prvního vráceného prvku).")

  public Integer getStart() {
    return start;
  }


  public void setStart(Integer start) {
    this.start = start;
  }


  public CiselnikyZakladniFiltr pocet(Integer pocet) {
    
    this.pocet = pocet;
    return this;
  }

   /**
   * Počet prvků k výstupu.
   * minimum: 0
   * @return pocet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Počet prvků k výstupu.")

  public Integer getPocet() {
    return pocet;
  }


  public void setPocet(Integer pocet) {
    this.pocet = pocet;
  }


  public CiselnikyZakladniFiltr razeni(List<String> razeni) {
    
    this.razeni = razeni;
    return this;
  }

  public CiselnikyZakladniFiltr addRazeniItem(String razeniItem) {
    if (this.razeni == null) {
      this.razeni = new ArrayList<>();
    }
    this.razeni.add(razeniItem);
    return this;
  }

   /**
   * Get razeni
   * @return razeni
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRazeni() {
    return razeni;
  }


  public void setRazeni(List<String> razeni) {
    this.razeni = razeni;
  }


  public CiselnikyZakladniFiltr zdrojCiselniku(String zdrojCiselniku) {
    
    this.zdrojCiselniku = zdrojCiselniku;
    return this;
  }

   /**
   * Zdroj/oblast číselníku - kód (ciselnikKod: TypZdrojeAres, zdroj:com) 
   * @return zdrojCiselniku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Zdroj/oblast číselníku - kód (ciselnikKod: TypZdrojeAres, zdroj:com) ")

  public String getZdrojCiselniku() {
    return zdrojCiselniku;
  }


  public void setZdrojCiselniku(String zdrojCiselniku) {
    this.zdrojCiselniku = zdrojCiselniku;
  }


  public CiselnikyZakladniFiltr kodCiselniku(String kodCiselniku) {
    
    this.kodCiselniku = kodCiselniku;
    return this;
  }

   /**
   * Kód číselníku
   * @return kodCiselniku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Kód číselníku")

  public String getKodCiselniku() {
    return kodCiselniku;
  }


  public void setKodCiselniku(String kodCiselniku) {
    this.kodCiselniku = kodCiselniku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CiselnikyZakladniFiltr ciselnikyZakladniFiltr = (CiselnikyZakladniFiltr) o;
    return Objects.equals(this.start, ciselnikyZakladniFiltr.start) &&
        Objects.equals(this.pocet, ciselnikyZakladniFiltr.pocet) &&
        Objects.equals(this.razeni, ciselnikyZakladniFiltr.razeni) &&
        Objects.equals(this.zdrojCiselniku, ciselnikyZakladniFiltr.zdrojCiselniku) &&
        Objects.equals(this.kodCiselniku, ciselnikyZakladniFiltr.kodCiselniku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, pocet, razeni, zdrojCiselniku, kodCiselniku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CiselnikyZakladniFiltr {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    pocet: ").append(toIndentedString(pocet)).append("\n");
    sb.append("    razeni: ").append(toIndentedString(razeni)).append("\n");
    sb.append("    zdrojCiselniku: ").append(toIndentedString(zdrojCiselniku)).append("\n");
    sb.append("    kodCiselniku: ").append(toIndentedString(kodCiselniku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start");
    openapiFields.add("pocet");
    openapiFields.add("razeni");
    openapiFields.add("zdrojCiselniku");
    openapiFields.add("kodCiselniku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CiselnikyZakladniFiltr
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CiselnikyZakladniFiltr.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CiselnikyZakladniFiltr is not found in the empty JSON string", CiselnikyZakladniFiltr.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CiselnikyZakladniFiltr.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CiselnikyZakladniFiltr` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("razeni") != null && !jsonObj.get("razeni").isJsonNull()) && !jsonObj.get("razeni").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `razeni` to be an array in the JSON string but got `%s`", jsonObj.get("razeni").toString()));
      }
      if ((jsonObj.get("zdrojCiselniku") != null && !jsonObj.get("zdrojCiselniku").isJsonNull()) && !jsonObj.get("zdrojCiselniku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zdrojCiselniku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zdrojCiselniku").toString()));
      }
      if ((jsonObj.get("kodCiselniku") != null && !jsonObj.get("kodCiselniku").isJsonNull()) && !jsonObj.get("kodCiselniku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kodCiselniku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kodCiselniku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CiselnikyZakladniFiltr.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CiselnikyZakladniFiltr' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CiselnikyZakladniFiltr> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CiselnikyZakladniFiltr.class));

       return (TypeAdapter<T>) new TypeAdapter<CiselnikyZakladniFiltr>() {
           @Override
           public void write(JsonWriter out, CiselnikyZakladniFiltr value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CiselnikyZakladniFiltr read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CiselnikyZakladniFiltr given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CiselnikyZakladniFiltr
  * @throws IOException if the JSON string is invalid with respect to CiselnikyZakladniFiltr
  */
  public static CiselnikyZakladniFiltr fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CiselnikyZakladniFiltr.class);
  }

 /**
  * Convert an instance of CiselnikyZakladniFiltr to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

