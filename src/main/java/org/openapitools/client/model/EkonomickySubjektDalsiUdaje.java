/*
 * ARES: REST API - veřejné
 * generováno: čtvrtek 14. prosince 2023 14:19:28, použité package:<<REST_COMMON>> DTO_COMMON,<<REST_COMMON_STRANKOVANI>> Řazení a stránkování,<<REST_COMMON_TEC>> Technické,<<REST_COMMON_TYPY>> DATOVE_TYPY_COMMON,<<REST_ARES>> EkonomickeSubjektySluzba,<<REST_ARES_DTO_COMMON>> DTO_ARES_COMMON,<<REST_VR>> EkonomickeSubjektyVrSluzba,<<REST_VR_DTO>> DTO_VR,<<REST_VR_DTO_COMMON>> DTO_VR_COMMON,<<REST_RES>> EkonomickeSubjektyResSluzba,<<REST_RES_DTO_COMMON>> DTO_RES_COMMON,<<REST_RZP>> EkonomickeSubjektyRzpSluzba,<<REST_RZP_DTO_COMMON>> DTO_RZP_COMMON,<<REST_RZP_DTO>> DTO_RZP,<<REST_NRPZS>> EkonomickeSubjektyNrpzsSluzba,<<REST_NRPZS_DTO_COMMON>> DTO_NRPZS_COMMON,<<REST_RPSH>> EkonomickeSubjektyRpshSluzba,<<REST_RPSH_DTO_COMMON>> DTO_RPSH_COMMON,<<REST_RCNS>> EkonomickeSubjektyRcnsSluzba,<<REST_RCNS_DTO_COMMON>> DTO_RCNS_COMMON,<<REST_RCNS_DTO>> DTO_RCNS,<<REST_SZR>> EkonomickeSubjektySzrSluzba,<<REST_SZR_DTO_COMMON>> REST_SZR_DTO_COMMON,<<REST_SZR_DTO>> DTO_SZR,<<REST_RS>> EkonomickeSubjektyRsSluzba,<<REST_RS_DTO_COMMON>> DTO_RS_COMMON,<<REST_RS_DTO>> DTO_RS,<<REST_CIS>> CiselnikyNazevnikySluzba,<<REST_CIS_DTO_COMMON>> DTO_CIS_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL,<<REST_RUIAN>> StandardizovaneAdresySluzba,<<REST_RUIAN_DTO_COMMON>> DTO_RUIAN_COMMON,<<REST_CEU>> EkonomickeSubjektyCeuSluzba,<<REST_CEU_DTO_COMMON>> REST_CEU_DTO_COMMON,<<REST_CEU_DTO>> DTO_CEU,<<REST_NOTIFIKACE>> EkonomickeSubjektyNotifikaceSluzba,<<REST_NOTIFIKACE_DTO_COMMON>> REST_NOTIFIKACE_DTO_COMMON,<<REST_DETAIL>> DTO_COMMON_DETAIL_NEV
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AdresaAres;
import org.openapitools.client.model.ObchodniJmenoAres;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Další údaje o ekonomickém subjektu
 */
@ApiModel(description = "Další údaje o ekonomickém subjektu")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-27T00:34:55.679880400+01:00[Europe/Prague]")
public class EkonomickySubjektDalsiUdaje {
  public static final String SERIALIZED_NAME_OBCHODNI_JMENO = "obchodniJmeno";
  @SerializedName(SERIALIZED_NAME_OBCHODNI_JMENO)
  private List<ObchodniJmenoAres> obchodniJmeno = null;

  public static final String SERIALIZED_NAME_SIDLO = "sidlo";
  @SerializedName(SERIALIZED_NAME_SIDLO)
  private List<AdresaAres> sidlo = null;

  public static final String SERIALIZED_NAME_PRAVNI_FORMA = "pravniForma";
  @SerializedName(SERIALIZED_NAME_PRAVNI_FORMA)
  private String pravniForma;

  public static final String SERIALIZED_NAME_SPISOVA_ZNACKA = "spisovaZnacka";
  @SerializedName(SERIALIZED_NAME_SPISOVA_ZNACKA)
  private String spisovaZnacka;

  public static final String SERIALIZED_NAME_DATOVY_ZDROJ = "datovyZdroj";
  @SerializedName(SERIALIZED_NAME_DATOVY_ZDROJ)
  private String datovyZdroj;

  public EkonomickySubjektDalsiUdaje() {
  }

  public EkonomickySubjektDalsiUdaje obchodniJmeno(List<ObchodniJmenoAres> obchodniJmeno) {
    
    this.obchodniJmeno = obchodniJmeno;
    return this;
  }

  public EkonomickySubjektDalsiUdaje addObchodniJmenoItem(ObchodniJmenoAres obchodniJmenoItem) {
    if (this.obchodniJmeno == null) {
      this.obchodniJmeno = new ArrayList<>();
    }
    this.obchodniJmeno.add(obchodniJmenoItem);
    return this;
  }

   /**
   * Get obchodniJmeno
   * @return obchodniJmeno
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ObchodniJmenoAres> getObchodniJmeno() {
    return obchodniJmeno;
  }


  public void setObchodniJmeno(List<ObchodniJmenoAres> obchodniJmeno) {
    this.obchodniJmeno = obchodniJmeno;
  }


  public EkonomickySubjektDalsiUdaje sidlo(List<AdresaAres> sidlo) {
    
    this.sidlo = sidlo;
    return this;
  }

  public EkonomickySubjektDalsiUdaje addSidloItem(AdresaAres sidloItem) {
    if (this.sidlo == null) {
      this.sidlo = new ArrayList<>();
    }
    this.sidlo.add(sidloItem);
    return this;
  }

   /**
   * Get sidlo
   * @return sidlo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AdresaAres> getSidlo() {
    return sidlo;
  }


  public void setSidlo(List<AdresaAres> sidlo) {
    this.sidlo = sidlo;
  }


  public EkonomickySubjektDalsiUdaje pravniForma(String pravniForma) {
    
    this.pravniForma = pravniForma;
    return this;
  }

   /**
   * Právní forma - kód (ciselnikKod: PravniForma, zdroj: res, com)
   * @return pravniForma
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Právní forma - kód (ciselnikKod: PravniForma, zdroj: res, com)")

  public String getPravniForma() {
    return pravniForma;
  }


  public void setPravniForma(String pravniForma) {
    this.pravniForma = pravniForma;
  }


  public EkonomickySubjektDalsiUdaje spisovaZnacka(String spisovaZnacka) {
    
    this.spisovaZnacka = spisovaZnacka;
    return this;
  }

   /**
   * Aktuální spisová značka ve tvaru ODDIL xx/SOUD (např. B 100/MSPH) - poskytováno pouze pro zdroj: Veřejné rejstříky 
   * @return spisovaZnacka
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Aktuální spisová značka ve tvaru ODDIL xx/SOUD (např. B 100/MSPH) - poskytováno pouze pro zdroj: Veřejné rejstříky ")

  public String getSpisovaZnacka() {
    return spisovaZnacka;
  }


  public void setSpisovaZnacka(String spisovaZnacka) {
    this.spisovaZnacka = spisovaZnacka;
  }


  public EkonomickySubjektDalsiUdaje datovyZdroj(String datovyZdroj) {
    
    this.datovyZdroj = datovyZdroj;
    return this;
  }

   /**
   * Identifikace primárního zdroje dat - kód (ciselnikKod: TypZdroje, zdroj: com) 
   * @return datovyZdroj
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifikace primárního zdroje dat - kód (ciselnikKod: TypZdroje, zdroj: com) ")

  public String getDatovyZdroj() {
    return datovyZdroj;
  }


  public void setDatovyZdroj(String datovyZdroj) {
    this.datovyZdroj = datovyZdroj;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EkonomickySubjektDalsiUdaje ekonomickySubjektDalsiUdaje = (EkonomickySubjektDalsiUdaje) o;
    return Objects.equals(this.obchodniJmeno, ekonomickySubjektDalsiUdaje.obchodniJmeno) &&
        Objects.equals(this.sidlo, ekonomickySubjektDalsiUdaje.sidlo) &&
        Objects.equals(this.pravniForma, ekonomickySubjektDalsiUdaje.pravniForma) &&
        Objects.equals(this.spisovaZnacka, ekonomickySubjektDalsiUdaje.spisovaZnacka) &&
        Objects.equals(this.datovyZdroj, ekonomickySubjektDalsiUdaje.datovyZdroj);
  }

  @Override
  public int hashCode() {
    return Objects.hash(obchodniJmeno, sidlo, pravniForma, spisovaZnacka, datovyZdroj);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EkonomickySubjektDalsiUdaje {\n");
    sb.append("    obchodniJmeno: ").append(toIndentedString(obchodniJmeno)).append("\n");
    sb.append("    sidlo: ").append(toIndentedString(sidlo)).append("\n");
    sb.append("    pravniForma: ").append(toIndentedString(pravniForma)).append("\n");
    sb.append("    spisovaZnacka: ").append(toIndentedString(spisovaZnacka)).append("\n");
    sb.append("    datovyZdroj: ").append(toIndentedString(datovyZdroj)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("obchodniJmeno");
    openapiFields.add("sidlo");
    openapiFields.add("pravniForma");
    openapiFields.add("spisovaZnacka");
    openapiFields.add("datovyZdroj");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EkonomickySubjektDalsiUdaje
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EkonomickySubjektDalsiUdaje.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EkonomickySubjektDalsiUdaje is not found in the empty JSON string", EkonomickySubjektDalsiUdaje.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EkonomickySubjektDalsiUdaje.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EkonomickySubjektDalsiUdaje` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("obchodniJmeno") != null && !jsonObj.get("obchodniJmeno").isJsonNull()) {
        JsonArray jsonArrayobchodniJmeno = jsonObj.getAsJsonArray("obchodniJmeno");
        if (jsonArrayobchodniJmeno != null) {
          // ensure the json data is an array
          if (!jsonObj.get("obchodniJmeno").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `obchodniJmeno` to be an array in the JSON string but got `%s`", jsonObj.get("obchodniJmeno").toString()));
          }

          // validate the optional field `obchodniJmeno` (array)
          for (int i = 0; i < jsonArrayobchodniJmeno.size(); i++) {
            ObchodniJmenoAres.validateJsonObject(jsonArrayobchodniJmeno.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("sidlo") != null && !jsonObj.get("sidlo").isJsonNull()) {
        JsonArray jsonArraysidlo = jsonObj.getAsJsonArray("sidlo");
        if (jsonArraysidlo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sidlo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sidlo` to be an array in the JSON string but got `%s`", jsonObj.get("sidlo").toString()));
          }

          // validate the optional field `sidlo` (array)
          for (int i = 0; i < jsonArraysidlo.size(); i++) {
            AdresaAres.validateJsonObject(jsonArraysidlo.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("pravniForma") != null && !jsonObj.get("pravniForma").isJsonNull()) && !jsonObj.get("pravniForma").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pravniForma` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pravniForma").toString()));
      }
      if ((jsonObj.get("spisovaZnacka") != null && !jsonObj.get("spisovaZnacka").isJsonNull()) && !jsonObj.get("spisovaZnacka").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spisovaZnacka` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spisovaZnacka").toString()));
      }
      if ((jsonObj.get("datovyZdroj") != null && !jsonObj.get("datovyZdroj").isJsonNull()) && !jsonObj.get("datovyZdroj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datovyZdroj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datovyZdroj").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EkonomickySubjektDalsiUdaje.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EkonomickySubjektDalsiUdaje' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EkonomickySubjektDalsiUdaje> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EkonomickySubjektDalsiUdaje.class));

       return (TypeAdapter<T>) new TypeAdapter<EkonomickySubjektDalsiUdaje>() {
           @Override
           public void write(JsonWriter out, EkonomickySubjektDalsiUdaje value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EkonomickySubjektDalsiUdaje read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EkonomickySubjektDalsiUdaje given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EkonomickySubjektDalsiUdaje
  * @throws IOException if the JSON string is invalid with respect to EkonomickySubjektDalsiUdaje
  */
  public static EkonomickySubjektDalsiUdaje fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EkonomickySubjektDalsiUdaje.class);
  }

 /**
  * Convert an instance of EkonomickySubjektDalsiUdaje to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

